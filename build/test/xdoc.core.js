"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const FS = require("fs");
const chai = require("chai");
const XDocParser_1 = require("../src/XDocParser");
const XDocASTNode_1 = require("../src/XDocASTNode");
/* Helpers */
const equal = chai.assert.deepEqual;
const source = FS.readFileSync(`${process.cwd()}/test/markdown.comment.txt`, 'utf-8');
const parseMarkdown = (source) => (new XDocParser_1.default(source).parse());
const getCode = () => parseMarkdown(source).map(ast => {
    let code = ast.children.filter(node => node.type === 'code')[0];
    return code;
})[0];
const documentation = (annotations) => XDocASTNode_1.createDocumentationNode(XDocASTNode_1.createBodyNode(annotations));
describe('XDoc Parser', () => {
    describe('parse markdown', () => {
        describe('parse xdoc code block', () => {
            it('shoud add an "xdoc" property to remark\'s markdown AST', () => {
                let code = getCode();
                chai.assert.exists(code['xdoc']);
            });
            it('should parse @tag id', () => equal(getCode()['xdoc'], documentation([
                XDocASTNode_1.createTagNode(XDocASTNode_1.createTagNameNode(XDocASTNode_1.createIdentifierNode('tag')), XDocASTNode_1.createTagIdentifierNode(XDocASTNode_1.createIdentifierNode('id')), null, null, null)
            ])));
        });
    });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoieGRvYy5jb3JlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vdGVzdC94ZG9jLmNvcmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSx5QkFBeUI7QUFDekIsNkJBQTZCO0FBQzdCLGtEQUFtRDtBQUNuRCxvREFBMEw7QUFFMUwsYUFBYTtBQUNiLE1BQU0sS0FBSyxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsU0FBUyxDQUFDO0FBQ3BDLE1BQU0sTUFBTSxHQUFHLEVBQUUsQ0FBQyxZQUFZLENBQUMsR0FBRyxPQUFPLENBQUMsR0FBRyxFQUFFLDRCQUE0QixFQUFFLE9BQU8sQ0FBQyxDQUFDO0FBQ3RGLE1BQU0sYUFBYSxHQUFHLENBQUMsTUFBYyxFQUFFLEVBQUUsQ0FBQyxDQUFDLElBQUksb0JBQWtCLENBQUMsTUFBTSxDQUFDLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztBQUNuRixNQUFNLE9BQU8sR0FBRyxHQUFHLEVBQUUsQ0FBQyxhQUFhLENBQUMsTUFBTSxDQUFDLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxFQUFFO0lBQ3BELElBQUksSUFBSSxHQUFHLEdBQUcsQ0FBQyxRQUFRLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksS0FBSyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUNoRSxPQUFPLElBQUksQ0FBQztBQUNkLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBRU4sTUFBTSxhQUFhLEdBQUcsQ0FBQyxXQUFzQixFQUFxQixFQUFFLENBQUMscUNBQXVCLENBQzFGLDRCQUFjLENBQ1osV0FBVyxDQUNaLENBQ0YsQ0FBQTtBQUdELFFBQVEsQ0FBQyxhQUFhLEVBQUUsR0FBRyxFQUFFO0lBQzNCLFFBQVEsQ0FBQyxnQkFBZ0IsRUFBRSxHQUFHLEVBQUU7UUFDOUIsUUFBUSxDQUFDLHVCQUF1QixFQUFFLEdBQUcsRUFBRTtZQUNyQyxFQUFFLENBQUMsd0RBQXdELEVBQUUsR0FBRyxFQUFFO2dCQUNoRSxJQUFJLElBQUksR0FBRyxPQUFPLEVBQUUsQ0FBQztnQkFDckIsSUFBSSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUM7WUFDbkMsQ0FBQyxDQUFDLENBQUM7WUFFSCxFQUFFLENBQUMsc0JBQXNCLEVBQUUsR0FBRyxFQUFFLENBQUMsS0FBSyxDQUNwQyxPQUFPLEVBQUUsQ0FBQyxNQUFNLENBQUMsRUFDakIsYUFBYSxDQUFDO2dCQUNaLDJCQUFhLENBQ1gsK0JBQWlCLENBQ2Ysa0NBQW9CLENBQUMsS0FBSyxDQUFDLENBQzVCLEVBQ0QscUNBQXVCLENBQ3JCLGtDQUFvQixDQUFDLElBQUksQ0FBQyxDQUMzQixFQUNELElBQUksRUFDSixJQUFJLEVBQ0osSUFBSSxDQUNMO2FBQUMsQ0FBQyxDQUNOLENBQUMsQ0FBQztRQUNMLENBQUMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQyxDQUFDLENBQUE7QUFDSixDQUFDLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIEZTIGZyb20gXCJmc1wiO1xuaW1wb3J0ICogYXMgY2hhaSBmcm9tICdjaGFpJztcbmltcG9ydCBYRG9jTWFya2Rvd25QYXJzZXIgZnJvbSAnLi4vc3JjL1hEb2NQYXJzZXInO1xuaW1wb3J0IHsgVGFnTm9kZSwgRG9jdW1lbnRhdGlvbk5vZGUsIGNyZWF0ZURvY3VtZW50YXRpb25Ob2RlLCBjcmVhdGVCb2R5Tm9kZSwgY3JlYXRlVGFnTmFtZU5vZGUsIGNyZWF0ZUlkZW50aWZpZXJOb2RlLCBjcmVhdGVUYWdJZGVudGlmaWVyTm9kZSwgY3JlYXRlVGFnTm9kZSB9IGZyb20gXCIuLi9zcmMvWERvY0FTVE5vZGVcIjtcblxuLyogSGVscGVycyAqL1xuY29uc3QgZXF1YWwgPSBjaGFpLmFzc2VydC5kZWVwRXF1YWw7XG5jb25zdCBzb3VyY2UgPSBGUy5yZWFkRmlsZVN5bmMoYCR7cHJvY2Vzcy5jd2QoKX0vdGVzdC9tYXJrZG93bi5jb21tZW50LnR4dGAsICd1dGYtOCcpO1xuY29uc3QgcGFyc2VNYXJrZG93biA9IChzb3VyY2U6IHN0cmluZykgPT4gKG5ldyBYRG9jTWFya2Rvd25QYXJzZXIoc291cmNlKS5wYXJzZSgpKTtcbmNvbnN0IGdldENvZGUgPSAoKSA9PiBwYXJzZU1hcmtkb3duKHNvdXJjZSkubWFwKGFzdCA9PiB7XG4gIGxldCBjb2RlID0gYXN0LmNoaWxkcmVuLmZpbHRlcihub2RlID0+IG5vZGUudHlwZSA9PT0gJ2NvZGUnKVswXTtcbiAgcmV0dXJuIGNvZGU7XG59KVswXTtcblxuY29uc3QgZG9jdW1lbnRhdGlvbiA9IChhbm5vdGF0aW9uczogVGFnTm9kZVtdKTogRG9jdW1lbnRhdGlvbk5vZGUgPT4gY3JlYXRlRG9jdW1lbnRhdGlvbk5vZGUoXG4gIGNyZWF0ZUJvZHlOb2RlKFxuICAgIGFubm90YXRpb25zXG4gIClcbilcblxuXG5kZXNjcmliZSgnWERvYyBQYXJzZXInLCAoKSA9PiB7XG4gIGRlc2NyaWJlKCdwYXJzZSBtYXJrZG93bicsICgpID0+IHtcbiAgICBkZXNjcmliZSgncGFyc2UgeGRvYyBjb2RlIGJsb2NrJywgKCkgPT4ge1xuICAgICAgaXQoJ3Nob3VkIGFkZCBhbiBcInhkb2NcIiBwcm9wZXJ0eSB0byByZW1hcmtcXCdzIG1hcmtkb3duIEFTVCcsICgpID0+IHtcbiAgICAgICAgbGV0IGNvZGUgPSBnZXRDb2RlKCk7XG4gICAgICAgIGNoYWkuYXNzZXJ0LmV4aXN0cyhjb2RlWyd4ZG9jJ10pO1xuICAgICAgfSk7XG5cbiAgICAgIGl0KCdzaG91bGQgcGFyc2UgQHRhZyBpZCcsICgpID0+IGVxdWFsKFxuICAgICAgICBnZXRDb2RlKClbJ3hkb2MnXSxcbiAgICAgICAgZG9jdW1lbnRhdGlvbihbXG4gICAgICAgICAgY3JlYXRlVGFnTm9kZShcbiAgICAgICAgICAgIGNyZWF0ZVRhZ05hbWVOb2RlKFxuICAgICAgICAgICAgICBjcmVhdGVJZGVudGlmaWVyTm9kZSgndGFnJylcbiAgICAgICAgICAgICksXG4gICAgICAgICAgICBjcmVhdGVUYWdJZGVudGlmaWVyTm9kZShcbiAgICAgICAgICAgICAgY3JlYXRlSWRlbnRpZmllck5vZGUoJ2lkJyksXG4gICAgICAgICAgICApLFxuICAgICAgICAgICAgbnVsbCxcbiAgICAgICAgICAgIG51bGwsXG4gICAgICAgICAgICBudWxsXG4gICAgICAgICAgKV0pXG4gICAgICApKTtcbiAgICB9KTtcbiAgfSlcbn0pOyJdfQ==